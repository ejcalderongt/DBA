-- Version 1.0 to 1.1 Updates
-- ==========================
GO

--#EJC20231031 Se agrega este parámetro para que los lotes solo tengan una fecha de vencimiento
ALTER TABLE bodega ADD homologar_lote_vencimiento bit NOT NULL DEFAULT 0;
GO

/* Código SQL adicional para actualizar de la versión 1.0 a 1.1 */
-- Aquí irían las demás instrucciones SQL como ALTER TABLE, CREATE TABLE, etc.
GO

-- Actualizaciones adicionales que podrían incluirse aquí
ALTER TABLE trans_oc_pol
ADD fecha_aceptacion date,
    fecha_llegada datetime,
    total_otros float,
    total_bultos_peso_neto float DEFAULT 0;
GO

--#GT18092023 Ingreso con póliza para bodegas fiscales.
CREATE VIEW [dbo].[VW_Ingreso_Fiscal]
AS
SELECT 
    bd.IdBodega,
    bd.nombre,
    oc_enc.IdOrdenCompraEnc,
    oc_det.IdOrdenCompraDet, oc_det.No_Linea,
    oc_enc.IdProveedorBodega,
    pv.nombre AS proveedor,
    oc_enc.IdTipoIngresoOC,
    oc_ti.Nombre AS tipo_ingreso,
    oc_enc.IdPedidoEncDevolucion, oc_enc.no_documento_devolucion,
    oc_enc.IdMotivoDevolucion,
    oc_det.IdPresentacion, oc_det.IdProductoBodega,
    pr.codigo, pr.codigo_barra, oc_det.nombre_producto,
    oc_estado.Nombre AS estado,
    oc_det.cantidad, oc_det.cantidad_recibida AS recibido,
    oc_det.IdUnidadMedidaBasica, oc_det.nombre_unidad_medida_basica,
    oc_det.peso,
    pc.nombre AS clasificacion,
    oc_enc.Fecha_Creacion AS fecha_registro,
    oc_pol.fecha_llegada AS fecha_llegada_poliza,
    oc_enc.Observacion AS observacion_ingreso, oc_enc.Referencia,
    oc_pol.numero_orden, oc_pol.codigo_poliza,
    oc_pol.IdRegimen,
    r_fiscal.codigo_regimen,
    vehiculo.placa,
    re_enc.NoGuia AS contenedor,
    re_enc.observacion,
    oc_det.activo
FROM trans_oc_enc oc_enc 
LEFT OUTER JOIN trans_oc_det oc_det ON oc_enc.IdOrdenCompraEnc = oc_det.IdOrdenCompraEnc
LEFT OUTER JOIN producto_bodega pb ON oc_det.IdProductoBodega = pb.IdProductoBodega
LEFT OUTER JOIN producto pr ON pb.IdProducto= pr.IdProducto
INNER JOIN bodega bd ON oc_enc.IDBODEGA = bd.IdBodega
LEFT OUTER JOIN producto_clasificacion pc ON pr.IdClasificacion=pc.IdClasificacion
LEFT OUTER JOIN trans_oc_pol oc_pol ON oc_enc.IdOrdenCompraEnc=oc_pol.IdOrdenCompraEnc
LEFT OUTER JOIN trans_re_oc re_oc ON oc_enc.IdOrdenCompraEnc=re_oc.IdOrdenCompraEnc
LEFT OUTER JOIN trans_re_enc re_enc ON re_oc.IdRecepcionEnc=re_enc.IdRecepcionEnc
INNER JOIN proveedor_bodega p_bodega ON oc_enc.IdProveedorBodega = p_bodega.IdAsignacion
INNER JOIN proveedor pv ON p_bodega.IdProveedor=pv.IdProveedor
LEFT OUTER JOIN empresa_transporte_vehiculos vehiculo ON re_enc.idvehiculo= vehiculo.IdVehiculo
INNER JOIN trans_oc_ti oc_ti ON oc_enc.IdTipoIngresoOC=oc_ti.IdTipoIngresoOC
LEFT OUTER JOIN regimen_fiscal r_fiscal ON oc_pol.IdRegimen= r_fiscal.IdRegimen
INNER JOIN trans_oc_estado oc_estado ON oc_enc.IdEstadoOC=oc_estado.IdEstadoOC;
GO

--#GT12092023: inserta opcion para ver ingresos con póliza en el apartado de reportes fiscales
Insert into menu_sistema values('2.5.1.9','Ingresos Fiscales','cmdIngresoPoliza',4,'2.5.1',0)
GO
IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '2.5.1.9')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'2.5.1.9',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

-- #GT18092023 define si es etiqueta para producto o para úbicación de rack
/****** Object:  Table [dbo].[producto_clasificacion_etiqueta]    Script Date: 18/09/2023 15:49:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[producto_clasificacion_etiqueta](
	[Idclasificacion_etiqueta] [int] NOT NULL,
	[Descripcion] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_producto_clasificacion_etiqueta] PRIMARY KEY CLUSTERED 
(
	[Idclasificacion_etiqueta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


alter table tipo_etiqueta add Idclasificacion_etiqueta int null
GO

ALTER TABLE [dbo].[tipo_etiqueta]  WITH CHECK ADD  CONSTRAINT [FK_tipo_etiqueta_producto_clasificacion_etiqueta] FOREIGN KEY([Idclasificacion_etiqueta])
REFERENCES [dbo].[producto_clasificacion_etiqueta] ([Idclasificacion_etiqueta])
GO
ALTER TABLE [dbo].[tipo_etiqueta] CHECK CONSTRAINT [FK_tipo_etiqueta_producto_clasificacion_etiqueta]
GO

CREATE FUNCTION Get_Porcentaje_Avance_Pedido
(
	@IdPedidoEnc int, @IdBodega int
)
RETURNS float
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Porcentaje float = 0

	SELECT @Porcentaje = ROUND(SUM(cantidad_verificada)*100/SUM(cantidad_solicitada),2)
	FROM trans_picking_ubic
	WHERE dañado_picking = 0 AND dañado_verificacion = 0 AND no_encontrado = 0 
	      AND IdPedidoEnc = @IdPedidoEnc AND IdBodega = @IdBodega
	GROUP BY IdPedidoEnc
	HAVING SUM(cantidad_solicitada)>0

	-- Return the result of the function
	RETURN @Porcentaje

END
GO

CREATE FUNCTION Get_Porcentaje_Avance_Picking 
(
	@IdPickingEnc int, @IdBodega int
)
RETURNS float
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Porcentaje float = 0

	SELECT @Porcentaje = ROUND(SUM(cantidad_recibida)*100/SUM(cantidad_solicitada),2)
	FROM trans_picking_ubic
	WHERE dañado_picking = 0 AND dañado_verificacion = 0 AND no_encontrado = 0 
	      AND IdPickingEnc = @IdPickingEnc AND IdBodega = @IdBodega
	GROUP BY IdPickingEnc
	HAVING SUM(cantidad_solicitada)>0

	-- Return the result of the function
	RETURN @Porcentaje

END
GO

CREATE TABLE [dbo].[configuracion_qa](
	[IdConfiguracionQA] [int] NOT NULL,
	[Nombre] [nvarchar](50) NULL,
	[FechaEjecucion] [datetime] NULL,
	[IdEmpresaOrigen] [int] NULL,
	[IdBodegaOrigen] [int] NULL,
	[IdPropietarioOrigen] [int] NULL,
	[IdProducto] [int] NULL,
	[IdCliente] [int] NULL,
	[Cantidad_Pedido_Presentacion] [float] NULL,
	[Cantidad_Pedido_UMBas] [float] NULL,
	[user_agr] [nvarchar](50) NULL,
	[fec_agr] [datetime] NULL,
	[user_mod] [nvarchar](50) NULL,
	[fec_mod] [datetime] NULL,
	[activo] [bit] NOT NULL,
	[Resultado] [nvarchar](250) NULL,
	[Observaciones] [nvarchar](250) NULL,
 CONSTRAINT [PK_configuracion_qa] PRIMARY KEY CLUSTERED 
(
	[IdConfiguracionQA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[configuracion_qa] ADD  CONSTRAINT [DF_configuracion_qa_activo]  DEFAULT ((1)) FOR [activo]
GO

ALTER TABLE [dbo].[configuracion_qa]  WITH CHECK ADD  CONSTRAINT [FK_configuracion_qa_bodega] FOREIGN KEY([IdBodegaOrigen])
REFERENCES [dbo].[bodega] ([IdBodega])
GO

ALTER TABLE [dbo].[configuracion_qa] CHECK CONSTRAINT [FK_configuracion_qa_bodega]
GO

ALTER TABLE [dbo].[configuracion_qa]  WITH CHECK ADD  CONSTRAINT [FK_configuracion_qa_cliente] FOREIGN KEY([IdCliente])
REFERENCES [dbo].[cliente] ([IdCliente])
GO

ALTER TABLE [dbo].[configuracion_qa] CHECK CONSTRAINT [FK_configuracion_qa_cliente]
GO

ALTER TABLE [dbo].[configuracion_qa]  WITH CHECK ADD  CONSTRAINT [FK_configuracion_qa_empresa] FOREIGN KEY([IdEmpresaOrigen])
REFERENCES [dbo].[empresa] ([IdEmpresa])
GO

ALTER TABLE [dbo].[configuracion_qa] CHECK CONSTRAINT [FK_configuracion_qa_empresa]
GO

ALTER TABLE [dbo].[configuracion_qa]  WITH CHECK ADD  CONSTRAINT [FK_configuracion_qa_producto] FOREIGN KEY([IdProducto])
REFERENCES [dbo].[producto] ([IdProducto])
GO

ALTER TABLE [dbo].[configuracion_qa] CHECK CONSTRAINT [FK_configuracion_qa_producto]
GO

/****** #EJC202310091353 ******/
CREATE TABLE [dbo].[trans_pe_det_log_reserva](
	[IdLogReserva] [int] NOT NULL,	
	[IdBodega] [int] NULL,
	[Fecha] [datetime] NULL,	
	[IdPedidoEnc] [int] NOT NULL,	
	[Line_No] [int] NULL,
	[Item_No] [nvarchar](50) NULL,
	[UmBas] [nvarchar](50) NULL,
	[Variant_Code] [nvarchar](50) NULL,
	[MensajeLog] [nvarchar](max) NULL,
	[Cantidad] [float] NULL,
	[Caso_Reserva] [nvarchar](50) NULL,
	[EsError] [bit] NOT NULL DEFAULT 0,
	[Referencia_Documento] [nvarchar](50) NULL,
 CONSTRAINT [PK_trans_pe_det_log_reserva] PRIMARY KEY CLUSTERED 
(
	[IdLogReserva] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[trans_pe_det_log_reserva] ADD  CONSTRAINT [DF_trans_pe_det_log_reserva]  DEFAULT (getdate()) FOR [Fecha]
GO

ALTER TABLE [dbo].[trans_pe_det_log_reserva] ADD  CONSTRAINT [DF__trans_pe_det_log_reserva__3B43FA92]  DEFAULT ((0)) FOR [IdPedidoEnc]
GO

--#GT10102023: campo para filtrar la duca activa cuando se registra más de una a la misma OC
ALTER TABLE trans_oc_pol add activo bit NOT NULL DEFAULT 1
GO

alter table trans_oc_pol
add codigo_poliza nvarchar(50),
ticket nvarchar(50),
numero_orden nvarchar(50),
fecha_aceptacion date,
fecha_llegada datetime,
total_otros float
GO

alter table trans_oc_pol add IdRegimen int null
GO

alter table trans_oc_pol add total_bultos_peso_neto float default 0
GO

ALTER TABLE trans_oc_pol
ADD 
clave_aduana VARCHAR(50) NULL, 
nit_imp_exp VARCHAR(50) NULL,
clase VARCHAR(50) NULL,
mod_transporte VARCHAR(50) NULL,
total_liquidar FLOAT NULL,
total_general FLOAT NULL
GO

ALTER TABLE trans_oc_pol ADD Codigo_Barra nvarchar(1000)
GO

Alter table i_nav_config_enc add codigo_bodega_erp_nc nvarchar(50) null
GO
Alter table i_nav_config_enc add lote_defecto_entrada_nc nvarchar(50) null
GO
Alter table i_nav_config_enc add vence_defecto_nc datetime null default '19000101'
GO

ALTER TABLE trans_oc_ti add es_importacion bit NOT NULL DEFAULT 0
GO

ALTER TABLE trans_oc_ti add permitir_vencido_ingreso bit NOT NULL DEFAULT 0
GO

alter table trans_re_enc ADD carta_cupo [nvarchar](50) NULL
GO

ALTER TABLE trans_oc_pol add activo bit NOT NULL DEFAULT 1
GO

Alter table i_nav_config_enc add IdProductoEstado_NC int null
GO

CREATE TABLE [dbo].[trans_picking_ubic_stock](
	[IdPickingUbicStock] [int] NOT NULL,
	[IdBodega] [int] NULL,
	[IdPickingUbic] [int] NOT NULL,
	[IdPickingDet] [int] NOT NULL,
	[IdUbicacion] [int] NULL,
	[IdStock] [int] NULL,
	[IdStockRes] [int] NOT NULL,
	[IdPropietarioBodega] [int] NULL,
	[IdProductoBodega] [int] NULL,
	[IdProductoEstado] [int] NULL,
	[IdPresentacion] [int] NULL,
	[IdUnidadMedida] [int] NULL,
	[IdUbicacionAnterior] [int] NULL,
	[IdRecepcion] [bigint] NULL,
	[IdPedidoEnc] [int] NULL,
	[IdPedidoDet] [int] NULL,
	[idpickingenc] [int] NULL,
	[IdOperadorBodega] [int] NULL,
	[IdOperadorBodega_Pickeo] [int] NULL,
	[IdOperadorBodega_Verifico] [int] NULL,
	[lote] [nvarchar](35) NULL,
	[fecha_vence] [datetime] NULL,
	[fecha_minima] [datetime] NULL,
	[serial] [nvarchar](35) NULL,
	[Licencia] [nvarchar](25) NULL,
	[cantidad_pickeada] [float] NULL,
	[cantidad_verificada] [float] NULL,
	[peso_pickeado] [float] NULL,
	[peso_verificado] [float] NULL,
	[fecha_picking] [datetime] NULL,
	[fecha_verificado] [datetime] NULL,
	[fecha_despachado] [datetime] NULL,
	[cantidad_despachada] [float] NULL,
	[user_agr] [nvarchar](50) NULL,
	[fec_agr] [datetime] NULL,
	[user_mod] [nvarchar](50) NULL,
	[fec_mod] [datetime] NULL,
	[activo] [bit] NULL,
	[IdUbicacionTemporal] [int] NULL,
	[IdOperadorBodega_Asignado] [int] NULL,
	[IdRecepcionDet] [int] NULL,	
 CONSTRAINT [PK_trans_picking_ubic_stock] PRIMARY KEY CLUSTERED 
(
	[IdPickingUbicStock] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[trans_picking_ubic_stock] ADD  DEFAULT ((0)) FOR [peso_pickeado]
GO

--#EJC20230807 Campos agregados para control 
ALTER TABLE TRANS_PICKING_UBIC_STOCK ADD procesado_bof bit not null default 0
GO
ALTER TABLE TRANS_PICKING_UBIC_STOCK ADD IdUsuario_bof_pickeo int null
GO
ALTER TABLE TRANS_PICKING_UBIC_STOCK ADD fecha_procesado_bof date null default '19000101'
GO
ALTER TABLE [dbo].[trans_picking_ubic_stock] ADD  DEFAULT ((0)) FOR [peso_verificado]
GO


ALTER TABLE TRANS_PICKING_UBIC_STOCK ADD cantidad_recibida float default null
GO

EXEC sp_rename 'TRANS_PICKING_UBIC_STOCK.lic_plate', 'licencia', 'COLUMN';
GO
/****** Object:  View [dbo].[VW_Stock_CambioUbic]    Script Date: 24/07/2023 15:55:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER VIEW [dbo].[VW_Stock_CambioUbic]
AS
SELECT dbo.producto_bodega.IdBodega, dbo.bodega.codigo AS Bodega, dbo.propietarios.IdPropietario, 
dbo.propietario_bodega.IdPropietarioBodega, dbo.producto.IdProducto, dbo.producto_bodega.IdProductoBodega, 
0 AS IdStock, 
                  dbo.stock.pallet_no_estandar, ISNULL(dbo.stock_det.posiciones, 1) AS Posiciones,
				  0 AS IdUbicacion_anterior, dbo.unidad_medida.IdUnidadMedida, 
				  dbo.stock.IdProductoEstado, dbo.stock.IdPresentacion, dbo.stock.IdRecepcionEnc, 
                  dbo.propietarios.nombre_comercial AS Propietario, dbo.producto.codigo,
				  dbo.producto.nombre, dbo.unidad_medida.Nombre AS UnidadMedida, 
				  dbo.producto_presentacion.nombre AS Presentacion, dbo.stock.lote, 
                  dbo.stock.fecha_ingreso, dbo.stock.fecha_vence, 
				  MAX(ISNULL(dbo.stock.cantidad, 0)) AS CantidadSF, dbo.stock.peso, 
				  ISNULL(MAX(dbo.stock.cantidad) / dbo.producto_presentacion.factor, 0) AS Cantidad, 
				  pr_est.nombre AS NomEstado, 
                  pr_est.dañado, ISNULL(dbo.producto_presentacion.factor, 0) AS Factor, 
				  pr_est.utilizable AS EstadoUtilizable, dbo.stock.IdUbicacion, 
				  dbo.stock.lic_plate, dbo.stock.serial, dbo.stock.añada, 
				  dbo.producto.IdIndiceRotacion, 
                  dbo.producto_presentacion.alto, dbo.producto_presentacion.largo, 
				  dbo.producto_presentacion.ancho, 
				  SUM(dbo.stock_res.cantidad)  AS CantidadReservada, dbo.bodega_ubicacion.IdTramo, 
                  dbo.bodega_ubicacion.ancho AS ancho_ubicacion, dbo.bodega_ubicacion.largo AS largo_ubicacion,
				  dbo.bodega_ubicacion.alto AS alto_ubicacion, 
				  dbo.indice_rotacion.Descripcion AS IndiceRotacion, 
                  dbo.producto.existencia_min AS existencia_min_umbas,
				  dbo.producto.existencia_max AS existencia_max_umbas, 
				  dbo.producto.codigo_barra, dbo.producto.costo, 
				  dbo.producto_presentacion.MinimoExistencia AS existencia_min_pres, 
                  dbo.producto_presentacion.MaximoExistencia AS existencia_max_pres, 
				  dbo.stock.atributo_variante_1, dbo.bodega_ubicacion.IdUbicacion AS IdUbicacionActual,
				  dbo.bodega_ubicacion.nivel AS Ubicacion_Nivel, 
                  dbo.bodega_ubicacion.indice_x AS Ubicacion_Indice_X, 
				  dbo.bodega_ubicacion.descripcion AS Ubicacion_Nombre, 
				  dbo.bodega_tramo.descripcion AS Ubicacion_Tramo, 
				  dbo.Nombre_Completo_Ubicacion(dbo.stock.IdUbicacion, 
                  dbo.stock.IdBodega) AS Nombre_Completo, 
				  dbo.bodega.IdEmpresa, dbo.producto.IdTipoEtiqueta, 
				  ISNULL(oc_pol.numero_orden, 'ND') AS numero_orden, 
				  ISNULL(oc_pol.codigo_poliza, 'ND') AS codigo_poliza, 
                  ISNULL(re_oc.IdOrdenCompraEnc, 0) AS Documento_Ingreso, 
				  dbo.bodega_ubicacion.ubicacion_picking,
				  dbo.producto_presentacion.CamasPorTarima,
				  dbo.producto_presentacion.CajasPorCama, dbo.bodega_tramo.es_rack, 
                  dbo.Nombre_Area(dbo.bodega_ubicacion.IdArea, 
				  dbo.bodega_ubicacion.IdBodega) AS Area, 
				  oc_pol.NoPoliza AS NoTO, ISNULL(pr_clas.nombre, 'ND') AS clasificacion,
				  oc_det.IdEmbarcador, oc_ship.Nombre AS Embarcador, 
                  dbo.Nombre_Completo_Ubicacion(dbo.stock.IdUbicacion, 
				  dbo.bodega_ubicacion.IdBodega) AS NombreUbicacion, 
				  MAX(ISNULL(dbo.stock_res.IdPedido, 0)) AS IdPedido, dbo.stock.IdRecepcionDet
FROM     dbo.stock INNER JOIN
                  dbo.propietario_bodega ON dbo.stock.IdPropietarioBodega = dbo.propietario_bodega.IdPropietarioBodega INNER JOIN
                  dbo.propietarios ON dbo.propietario_bodega.IdPropietario = dbo.propietarios.IdPropietario INNER JOIN
                  dbo.unidad_medida ON dbo.unidad_medida.IdUnidadMedida = dbo.stock.IdUnidadMedida INNER JOIN
                  dbo.producto_estado AS pr_est ON dbo.stock.IdProductoEstado = pr_est.IdEstado INNER JOIN
                  dbo.bodega_tramo INNER JOIN
                  dbo.bodega_ubicacion ON dbo.bodega_tramo.IdTramo = dbo.bodega_ubicacion.IdTramo AND dbo.bodega_tramo.IdBodega = dbo.bodega_ubicacion.IdBodega AND dbo.bodega_tramo.IdSector = dbo.bodega_ubicacion.IdSector ON 
                  dbo.stock.IdBodega = dbo.bodega_ubicacion.IdBodega AND dbo.stock.IdUbicacion = dbo.bodega_ubicacion.IdUbicacion INNER JOIN
                  dbo.producto_bodega INNER JOIN
                  dbo.producto ON dbo.producto_bodega.IdProducto = dbo.producto.IdProducto INNER JOIN
                  dbo.bodega ON dbo.producto_bodega.IdBodega = dbo.bodega.IdBodega LEFT OUTER JOIN
                  dbo.indice_rotacion ON dbo.producto.IdIndiceRotacion = dbo.indice_rotacion.IdIndiceRotacion ON dbo.stock.IdProductoBodega = dbo.producto_bodega.IdProductoBodega LEFT OUTER JOIN
                  dbo.stock_res ON dbo.stock.IdStock = dbo.stock_res.IdStock AND dbo.stock.IdPropietarioBodega = dbo.stock_res.IdPropietarioBodega AND dbo.stock.IdProductoBodega = dbo.stock_res.IdProductoBodega AND 
                  dbo.stock.IdUbicacion = dbo.stock_res.IdUbicacion AND dbo.stock.IdBodega = dbo.stock_res.idbodega AND dbo.stock.IdProductoEstado = dbo.stock_res.IdProductoEstado AND dbo.stock.IdProductoEstado = pr_est.IdEstado AND 
                  dbo.stock_res.IdUnidadMedida = dbo.unidad_medida.IdUnidadMedida LEFT OUTER JOIN
                  dbo.producto_presentacion ON dbo.stock.IdPresentacion = dbo.producto_presentacion.IdPresentacion LEFT OUTER JOIN
                  dbo.stock_det ON dbo.stock.IdStock = dbo.stock_det.IdStock LEFT OUTER JOIN
                  dbo.trans_re_enc AS re_enc ON re_enc.IdRecepcionEnc = dbo.stock.IdRecepcionEnc LEFT OUTER JOIN
                  dbo.trans_re_oc AS re_oc ON re_oc.IdRecepcionEnc = re_enc.IdRecepcionEnc LEFT OUTER JOIN
                  dbo.trans_oc_pol AS oc_pol ON oc_pol.IdOrdenCompraEnc = re_oc.IdOrdenCompraEnc LEFT OUTER JOIN
                  dbo.producto_clasificacion AS pr_clas ON dbo.producto.IdClasificacion = pr_clas.IdClasificacion LEFT OUTER JOIN
                  dbo.trans_oc_det AS oc_det ON oc_det.IdOrdenCompraEnc = re_oc.IdOrdenCompraEnc AND oc_det.IdUnidadMedidaBasica = dbo.producto.IdUnidadMedidaBasica AND oc_det.IdProductoBodega = dbo.stock.IdProductoBodega AND 
                  oc_det.IdOrdenCompraDet = dbo.stock.IdRecepcionDet LEFT OUTER JOIN
                  dbo.trans_oc_embarcador AS oc_ship ON oc_det.IdEmbarcador = oc_ship.IdEmbarcador
GROUP BY dbo.propietarios.nombre_comercial, dbo.propietarios.IdPropietario, dbo.bodega_ubicacion.IdUbicacion, dbo.propietario_bodega.IdPropietarioBodega, dbo.producto_bodega.IdProductoBodega, dbo.unidad_medida.IdUnidadMedida, 
                  dbo.unidad_medida.Nombre, dbo.producto_presentacion.nombre, dbo.producto.IdProducto, dbo.producto.codigo, dbo.producto.nombre, dbo.stock.lote, dbo.stock.fecha_ingreso, dbo.stock.serial, dbo.stock.añada, 
                  dbo.producto_bodega.IdBodega, dbo.stock.fecha_vence, dbo.stock.IdProductoEstado, pr_est.nombre, pr_est.utilizable, pr_est.dañado, dbo.stock.IdUbicacion, dbo.stock.IdPresentacion, dbo.stock.IdRecepcionEnc, dbo.stock.lic_plate, 
                  dbo.stock.peso, dbo.producto.IdIndiceRotacion, dbo.producto_presentacion.alto, dbo.producto_presentacion.largo, dbo.producto_presentacion.ancho, dbo.producto_presentacion.factor, dbo.bodega_ubicacion.IdTramo, 
                  dbo.bodega_ubicacion.ancho, dbo.bodega_ubicacion.largo, dbo.bodega_ubicacion.alto, dbo.indice_rotacion.Descripcion, dbo.producto.existencia_min, dbo.producto.existencia_max, dbo.producto.codigo_barra, dbo.producto.costo, 
                  dbo.producto_presentacion.MinimoExistencia, dbo.producto_presentacion.MaximoExistencia, dbo.producto_presentacion.factor, dbo.stock.atributo_variante_1, dbo.bodega_ubicacion.nivel, dbo.bodega_ubicacion.indice_x, 
                  dbo.bodega_ubicacion.descripcion, dbo.bodega_tramo.descripcion, dbo.bodega_tramo.descripcion, dbo.bodega_ubicacion.orientacion_pos, dbo.bodega_tramo.es_rack, dbo.bodega_tramo.descripcion, dbo.bodega_tramo.IdBodega, 
                  dbo.bodega_tramo.IdTramo, dbo.stock.IdBodega, dbo.bodega.codigo, dbo.bodega.IdEmpresa, dbo.stock_det.posiciones, dbo.stock.pallet_no_estandar, dbo.producto.IdTipoEtiqueta, oc_pol.numero_orden, oc_pol.codigo_poliza, 
                  re_oc.IdOrdenCompraEnc, dbo.bodega_ubicacion.ubicacion_picking, dbo.producto_presentacion.CamasPorTarima, dbo.producto_presentacion.CajasPorCama, dbo.bodega_ubicacion.IdArea, dbo.bodega_ubicacion.IdBodega, 
                  oc_pol.NoPoliza, pr_clas.nombre, oc_det.IdEmbarcador, oc_ship.Nombre, dbo.stock.IdStock, dbo.stock.IdRecepcionDet

GO

CREATE VIEW [dbo].[VW_Detalle_Licencias_Inconsistentes]
AS
SELECT S4.lic_plate Licencia, pr.Codigo, pr.Nombre, dbo.Nombre_Completo_Ubicacion(s4.IdUbicacion, s4.IdBodega) Ubicacion, s4.IdBodega
FROM   stock S4 inner join 
       producto_bodega pb on s4.IdProductoBodega = pb.IdProductoBodega inner join
	   producto pr on pr.IdProducto = pb.IdProducto
WHERE  S4.IdUbicacion IN (
							SELECT s3.IdUbicacion
							FROM   dbo.stock AS s3 INNER JOIN
								   dbo.bodega_ubicacion AS bu ON s3.IdUbicacion = bu.IdUbicacion AND s3.IdBodega = bu.IdBodega INNER JOIN
								   dbo.bodega_tramo AS bt ON bt.IdSector = bu.IdSector AND bt.IdBodega = bu.IdBodega
							WHERE  bu.nivel>1 
							GROUP BY s3.IdUbicacion, s3.IdBodega, bt.es_rack
							HAVING COUNT(DISTINCT s3.lic_plate)>1) 
       AND S4.IDSTOCK NOT IN (SELECT MAX(IdStock)
                              FROM stock s2 WHERE Idubicacion in  (SELECT s.IdUbicacion
																   FROM    dbo.stock AS s INNER JOIN
																		   dbo.bodega_ubicacion AS bu ON s.IdUbicacion = bu.IdUbicacion AND s.IdBodega = bu.IdBodega INNER JOIN
																		   dbo.bodega_tramo AS bt ON bt.IdSector = bu.IdSector AND bt.IdBodega = bu.IdBodega
																	WHERE  bu.nivel>1 
																	GROUP BY s.IdUbicacion, s.IdBodega, bt.es_rack
																	HAVING COUNT(DISTINCT s.lic_plate)>1)

                               GROUP BY IdUbicacion)
	   AND S4.IdStock NOT IN (SELECT IdStock FROM stock_res)
GO

ALTER TABLE bodega add homologar_lote_vencimiento bit not null default 0
GO
ALTER TABLE trans_picking_enc ADD fotografia_verificacion bit NOT NULL DEFAULT 0
GO

/****** Object:  Table [dbo].[trans_picking_img]    Script Date: 29/10/2023 23:52:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[trans_picking_img](
	[IdImagen] [int] NOT NULL,
	[IdPickingEnc] [int] NOT NULL,
	[IdPickingDet] [int] NOT NULL,
	[IdPedidoEnc] [int] NOT NULL,
	[IdPedidoDet] [int] NOT NULL,
	[Imagen] [image] NOT NULL,
	[user_agr] [nvarchar](50) NOT NULL,
	[fec_agr] [datetime] NOT NULL,
	[observacion] [nvarchar](150) NULL,
 CONSTRAINT [PK_trans_picking_img_1] PRIMARY KEY CLUSTERED 
(
	[IdImagen] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[trans_picking_img]  WITH CHECK ADD  CONSTRAINT [FK_trans_picking_img_trans_pe_det] FOREIGN KEY([IdPedidoDet])
REFERENCES [dbo].[trans_pe_det] ([IdPedidoDet])
GO

ALTER TABLE [dbo].[trans_picking_img] CHECK CONSTRAINT [FK_trans_picking_img_trans_pe_det]
GO

ALTER TABLE [dbo].[trans_picking_img]  WITH CHECK ADD  CONSTRAINT [FK_trans_picking_img_trans_pe_enc] FOREIGN KEY([IdPedidoEnc])
REFERENCES [dbo].[trans_pe_enc] ([IdPedidoEnc])
GO

ALTER TABLE [dbo].[trans_picking_img] CHECK CONSTRAINT [FK_trans_picking_img_trans_pe_enc]
GO

ALTER TABLE [dbo].[trans_picking_img]  WITH CHECK ADD  CONSTRAINT [FK_trans_picking_img_trans_picking_det] FOREIGN KEY([IdPickingDet])
REFERENCES [dbo].[trans_picking_det] ([IdPickingDet])
GO

ALTER TABLE [dbo].[trans_picking_img] CHECK CONSTRAINT [FK_trans_picking_img_trans_picking_det]
GO

ALTER TABLE [dbo].[trans_picking_img]  WITH CHECK ADD  CONSTRAINT [FK_trans_picking_img_trans_picking_enc] FOREIGN KEY([IdPickingEnc])
REFERENCES [dbo].[trans_picking_enc] ([IdPickingEnc])
GO

ALTER TABLE [dbo].[trans_picking_img] CHECK CONSTRAINT [FK_trans_picking_img_trans_picking_enc]
GO

alter table bodega_ubicacion add posicion_x float default 0, posicion_y float default 0

ALTER TABLE trans_pe_tipo ADD fotografia_verificacion bit NOT NULL DEFAULT 0


/****** Object:  Table [dbo].[proveedor_tiempos] #EJC   Script Date: 23/10/2023 09:05:44 ******/

CREATE TABLE [dbo].[proveedor_tiempos](
	[IdTiempoproveedor] [int] NOT NULL,
	[Idproveedor] [int] NOT NULL,
	[IdFamilia] [int] NULL,
	[IdClasificacion] [int] NULL,
	[Dias_Local] [int] NULL,
	[Dias_Exterior] [int] NULL,
	[user_agr] [nvarchar](25) NULL,
	[fec_agr] [datetime] NULL,
	[user_mod] [nvarchar](25) NULL,
	[fec_mod] [datetime] NULL,
	[activo] [bit] NULL,
 CONSTRAINT [PK_proveedor_tiempos_1] PRIMARY KEY CLUSTERED 
(
	[IdTiempoproveedor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[proveedor_tiempos]  WITH CHECK ADD  CONSTRAINT [FK_proveedor_tiempos_proveedor] FOREIGN KEY([Idproveedor])
REFERENCES [dbo].[proveedor] ([Idproveedor])
GO

ALTER TABLE [dbo].[proveedor_tiempos] CHECK CONSTRAINT [FK_proveedor_tiempos_proveedor]
GO

ALTER TABLE [dbo].[proveedor_tiempos]  WITH CHECK ADD  CONSTRAINT [FK_proveedor_tiempos_producto_clasificacion] FOREIGN KEY([IdClasificacion])
REFERENCES [dbo].[producto_clasificacion] ([IdClasificacion])
GO

ALTER TABLE [dbo].[proveedor_tiempos] CHECK CONSTRAINT [FK_proveedor_tiempos_producto_clasificacion]
GO

ALTER TABLE [dbo].[proveedor_tiempos]  WITH CHECK ADD  CONSTRAINT [FK_proveedor_tiempos_producto_familia] FOREIGN KEY([IdFamilia])
REFERENCES [dbo].[producto_familia] ([IdFamilia])
GO

ALTER TABLE [dbo].[proveedor_tiempos] CHECK CONSTRAINT [FK_proveedor_tiempos_producto_familia]
GO
/****** Object:  View [dbo].[VW_TiempoProveedor]    Script Date: 24/10/2023 14:10:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[VW_TiempoProveedor]
AS
SELECT     pf.nombre AS Familia, pc.nombre AS Clasificación, ct.*
FROM         dbo.proveedor_tiempos AS ct LEFT OUTER JOIN
                      dbo.producto_familia AS pf ON ct.IdFamilia = pf.IdFamilia LEFT OUTER JOIN
                      dbo.producto_clasificacion AS pc ON ct.IdClasificacion = pc.IdClasificacion
GO


alter table trans_re_enc add no_contenedor nvarchar(50)
GO


/****** Object:  View [dbo].[VW_Ingreso_Fiscal]    Script Date: 6/11/2023 19:54:24 ******/
SET ANSI_NULLS ON
GO
 
SET QUOTED_IDENTIFIER ON
GO
 
ALTER view [dbo].[VW_Ingreso_Fiscal]
as
SELECT bd.IdBodega, oc_enc.IdOrdenCompraEnc, oc_det.IdOrdenCompraDet, oc_pol.IdOrdenCompraPol, oc_enc.IdProveedorBodega, oc_enc.IdTipoIngresoOC, bd.nombre AS Nombre_Recinto, oc_pol.dua AS DUCA, 
                  oc_pol.numero_orden AS Numero_Orden_DUCA, oc_det.No_Linea AS Linea, pr.codigo AS Mercancia_Codigo, oc_det.nombre_producto AS Mercancia_Descripcion, oc_estado.Nombre AS Mercancia_Estado, 
                  oc_det.cantidad AS Cantidad_Documento, oc_det.cantidad_recibida, oc_det.nombre_unidad_medida_basica AS UM, oc_det.peso, oc_enc.Fecha_Creacion AS Fecha_Ingreso, oc_pol.fecha_llegada AS Fecha_Llegada_Poliza, 
                  oc_enc.Observacion AS Observacion_Ingreso, oc_enc.Referencia, oc_pol.codigo_poliza, oc_pol.IdRegimen, r_fiscal.codigo_regimen, vehiculo.placa AS Placa_Transporte, re_enc.No_Marchamo, re_enc.observacion AS Observacion, 
                  re_enc.carta_cupo AS Carta_Cupo, oc_pol.Activo AS Activo, re_enc.no_contenedor as No_Contenedor
FROM     dbo.trans_oc_enc AS oc_enc LEFT OUTER JOIN
                  dbo.trans_oc_det AS oc_det ON oc_enc.IdOrdenCompraEnc = oc_det.IdOrdenCompraEnc LEFT OUTER JOIN
                  dbo.producto_bodega AS pb ON oc_det.IdProductoBodega = pb.IdProductoBodega LEFT OUTER JOIN
                  dbo.producto AS pr ON pb.IdProducto = pr.IdProducto INNER JOIN
                  dbo.bodega AS bd ON oc_enc.IDBODEGA = bd.IdBodega LEFT OUTER JOIN
                  dbo.producto_clasificacion AS pc ON pr.IdClasificacion = pc.IdClasificacion LEFT OUTER JOIN
                  dbo.trans_oc_pol AS oc_pol ON oc_enc.IdOrdenCompraEnc = oc_pol.IdOrdenCompraEnc LEFT OUTER JOIN
                  dbo.trans_re_oc AS re_oc ON oc_enc.IdOrdenCompraEnc = re_oc.IdOrdenCompraEnc LEFT OUTER JOIN
                  dbo.trans_re_enc AS re_enc ON re_oc.IdRecepcionEnc = re_enc.IdRecepcionEnc INNER JOIN
                  dbo.proveedor_bodega AS p_bodega ON oc_enc.IdProveedorBodega = p_bodega.IdAsignacion INNER JOIN
                  dbo.proveedor AS pv ON p_bodega.IdProveedor = pv.IdProveedor LEFT OUTER JOIN
                  dbo.empresa_transporte_vehiculos AS vehiculo ON re_enc.idvehiculo = vehiculo.IdVehiculo INNER JOIN
                  dbo.trans_oc_ti AS oc_ti ON oc_enc.IdTipoIngresoOC = oc_ti.IdTipoIngresoOC LEFT OUTER JOIN
                  dbo.regimen_fiscal AS r_fiscal ON oc_pol.IdRegimen = r_fiscal.IdRegimen INNER JOIN
                  dbo.trans_oc_estado AS oc_estado ON oc_enc.IdEstadoOC = oc_estado.IdEstadoOC
GO			  

Insert into menu_sistema values('3.13','SAT','rpgSAT',2,'3',0)
GO

Insert into menu_sistema values('3.13.1','SAT','mnuReportesSAT',3,'3.13',0)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '3.13.1')
Insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'3.13.1',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '3.13')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'3.13',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

/****** Object:  View [dbo].[VW_Packing]    Script Date: 6/11/2023 21:12:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER VIEW [dbo].[VW_Packing]
AS
SELECT        dbo.trans_packing_enc.idpickingenc, dbo.trans_packing_enc.idpackingenc, dbo.trans_packing_enc.no_linea, dbo.producto.codigo, dbo.producto.nombre, dbo.trans_packing_enc.lote, dbo.trans_packing_enc.fecha_vence, 
                         dbo.unidad_medida.Nombre AS umbas, dbo.producto_presentacion.nombre AS presentacion, dbo.producto_estado.nombre AS estado, dbo.trans_packing_enc.lic_plate AS licencia, 
                         dbo.trans_packing_enc.cantidad_bultos_packing, dbo.trans_packing_enc.cantidad_camas_packing, dbo.trans_packing_enc.fecha_packing, dbo.operador.nombres AS operador, dbo.trans_packing_enc.iddespachoenc, 
                         dbo.trans_despacho_enc.marchamo, dbo.empresa_transporte_vehiculos.placa, dbo.empresa_transporte_pilotos.nombres AS nombre_piloto, dbo.empresa_transporte_pilotos.apellidos AS apellido_piloto, 
                         dbo.empresa_transporte_pilotos.no_licencia, dbo.empresa_transporte_vehiculos.placa_comercial, dbo.empresa_transporte_vehiculos.marca, dbo.empresa_transporte_vehiculos.modelo, 
                         dbo.propietarios.nombre_comercial AS propietario, dbo.empresa.imagen, dbo.trans_packing_enc.referencia
FROM            dbo.producto_presentacion RIGHT OUTER JOIN
                         dbo.trans_packing_enc INNER JOIN
                         dbo.producto_bodega ON dbo.trans_packing_enc.idproductobodega = dbo.producto_bodega.IdProductoBodega INNER JOIN
                         dbo.producto ON dbo.producto_bodega.IdProducto = dbo.producto.IdProducto INNER JOIN
                         dbo.unidad_medida ON dbo.trans_packing_enc.idunidadmedida = dbo.unidad_medida.IdUnidadMedida INNER JOIN
                         dbo.operador_bodega ON dbo.trans_packing_enc.idoperadorbodega = dbo.operador_bodega.IdOperadorBodega INNER JOIN
                         dbo.operador ON dbo.operador_bodega.IdOperador = dbo.operador.IdOperador INNER JOIN
                         dbo.propietarios ON dbo.producto.IdPropietario = dbo.propietarios.IdPropietario INNER JOIN
                         dbo.empresa ON dbo.operador.IdEmpresa = dbo.empresa.IdEmpresa AND dbo.propietarios.IdEmpresa = dbo.empresa.IdEmpresa ON 
                         dbo.producto_presentacion.IdPresentacion = dbo.trans_packing_enc.idpresentacion LEFT OUTER JOIN
                         dbo.empresa_transporte_vehiculos INNER JOIN
                         dbo.trans_despacho_enc ON dbo.empresa_transporte_vehiculos.IdVehiculo = dbo.trans_despacho_enc.IdVehiculo ON dbo.trans_packing_enc.iddespachoenc = dbo.trans_despacho_enc.IdDespachoEnc LEFT OUTER JOIN
                         dbo.producto_estado ON dbo.trans_packing_enc.idproductoestado = dbo.producto_estado.IdEstado LEFT OUTER JOIN
                         dbo.empresa_transporte_pilotos ON dbo.trans_despacho_enc.IdPiloto = dbo.empresa_transporte_pilotos.IdPiloto
GO

/****** #EJC202310200006******/
alter table trans_pe_det_log_reserva add Fecha_Vence date null
GO

alter table trans_pe_det_log_reserva add IdPedidoDet int null
GO

alter table trans_pe_det_log_reserva add IdStock int null
GO

alter table trans_pe_det_log_reserva add IdStockRes int null
GO

alter table i_nav_ped_compra_enc add IsImport bit default 0
GO

DELETE FROM menu_sistema WHERE IdMenu IN ('3.13.1.1','3.13.1.2','3.13.1.3')
GO

Insert into menu_sistema values('3.13.1.1','Ingresos SAT','mnuRptIngresosSAT',4,'3.13.1',0)
GO

Insert into menu_sistema values('3.13.1.2','Salidas SAT','mnuRptSalidasSAT',4,'3.13.1',0)
GO

Insert into menu_sistema values('3.13.1.3','Existencias SAT','mnurptExistenciasSAT',4,'3.13.1',0)
GO
 
IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '3.13.1.1')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'3.13.1.1',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '3.13.1.2')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'3.13.1.2',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '3.13.1.3')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'3.13.1.3',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

/****** Object:  Table [dbo].[area_estado]    Script Date: 14/11/2023 22:02:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[area_estado](
	[IdAreaEstado] [int] NOT NULL,
	[IdArea] [int] NULL,
	[IdEstado] [int] NULL,
	[activo] [bit] NULL,
	[user_agr] [nvarchar](50) NULL,
	[fec_agr] [datetime] NULL,
	[user_mod] [nvarchar](50) NULL,
	[fec_mod] [datetime] NULL,
 CONSTRAINT [PK_area_estado] PRIMARY KEY CLUSTERED 
(
	[IdAreaEstado] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[i_nav_config_area_bodega]    Script Date: 14/11/2023 22:45:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[i_nav_config_area_bodega](
	[Idnavconfigareabodega] [int] NOT NULL,
	[IdArea] [int] NOT NULL,
	[IdBodega] [int] NOT NULL,
	[codigo_bodega_erp] [nvarchar](50) NOT NULL,
	[activo] [bit] NULL,
	[user_agr] [nvarchar](25) NULL,
	[fec_agr] [datetime] NULL,
	[user_mod] [nvarchar](25) NULL,
	[fec_mod] [datetime] NULL,
 CONSTRAINT [PK_i_nav_config_area_bodega] PRIMARY KEY CLUSTERED 
(
	[Idnavconfigareabodega] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

--#CKFK20231118: Opcion para ver el menú de Actualizar BD y Actualizar Indices
Insert into menu_sistema values('7.9','SAT','rpgActualizacionesBD',2,'7',0)
GO
Insert into menu_sistema values('7.9.1','SAT','mnuActualizarBD',3,'7.9',0)
GO
Insert into menu_sistema values('7.9.2','SAT','mnuActualizarIndices',3,'7.9',0)
GO


IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '7.9')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'7.9',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '7.9.1')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'7.9.1',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '7.9.2')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'7.9.2',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

ALTER TABLE producto_estado ADD dias_vencimiento_clasificacion int NOT NULL Default 0
GO
ALTER TABLE producto_estado ADD tolerancia_dias_vencimiento int NOT NULL Default 0
GO

/******#CKFK20231118 Agregué las columnas dias_vencimiento_clasificacion y tolerancia_dias_vencimiento*****/
/****** Object:  View [dbo].[VW_ProductoEstado]    Script Date: 18/11/2023 15:40:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER VIEW [dbo].[VW_ProductoEstado]
AS
SELECT p.nombre_comercial AS Propietario, e.IdEstado, e.IdPropietario, e.nombre, e.IdUbicacionDefecto, e.utilizable, e.activo, e.user_agr, e.fec_agr, e.user_mod, e.fec_mod, 
       e.dañado, e.codigo_bodega_erp, e.sistema, e.dias_vencimiento_clasificacion,e.tolerancia_dias_vencimiento
FROM         dbo.producto_estado AS e INNER JOIN
                      dbo.propietarios AS p ON e.IdPropietario = p.IdPropietario
GO

/***** CKFK20231118 Agregué los campos dias_vencimiento_clasificacion y tolerancia_dias_vencimiento******/
/****** Object:  View [dbo].[VW_Producto_Estado_Ubic_Bodega_HH]    Script Date: 18/11/2023 20:43:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER VIEW [dbo].[VW_Producto_Estado_Ubic_Bodega_HH]
AS
SELECT e.IdEstado, e.IdPropietario, e.nombre, e.IdUbicacionDefecto, e.utilizable, e.activo, e.user_agr, e.fec_agr, e.user_mod, e.fec_mod,
       e.dañado, e.codigo_bodega_erp, ISNULL(e.sistema,0) Sistema, 
	   ISNULL(pe.IdUbicacionDefecto, 0) AS IdUbicacionBodegaDefecto, 
       ISNULL(pe.IdBodega, 0) AS IdBodega, 
	   CASE WHEN ISNULL(pe.IdUbicacionDefecto, 0) = 0 THEN 'N/D' ELSE dbo.Nombre_Completo_Ubicacion(pe.IdUbicacionDefecto, pe.IdBodega) 
       END AS NombreUbic, e.dias_vencimiento_clasificacion,e.tolerancia_dias_vencimiento
FROM            dbo.producto_estado AS e INNER JOIN
                         dbo.propietarios AS p ON e.IdPropietario = p.IdPropietario LEFT OUTER JOIN
                         (SELECT * 
						  FROM dbo.producto_estado_ubic 
						  WHERE EXISTS (SELECT bu.IdUbicacion 
						                FROM bodega_ubicacion bu 
										WHERE bu.IdUbicacion = producto_estado_ubic.IdUbicacionDefecto AND
						                      bu.IdBodega = producto_estado_ubic.IdBodega )) AS pe  ON pe.IdEstado = e.IdEstado 

GO

/****** Object:  View [dbo].[VW_Producto_Estado_Ubic_Bodega_HH]    Script Date: 21/03/2021 23:32:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_Producto_Estado_Ubic_Bodega_HH]
AS
SELECT        e.IdEstado, e.IdPropietario, e.nombre, e.IdUbicacionDefecto, e.utilizable, e.activo, e.user_agr, e.fec_agr, e.user_mod, e.fec_mod, e.dañado, e.codigo_bodega_erp, e.sistema, ISNULL(pe.IdUbicacionDefecto, 0) 
                         AS IdUbicacionBodegaDefecto, ISNULL(pe.IdBodega, 0) AS IdBodega, CASE WHEN ISNULL(pe.IdUbicacionDefecto, 0) = 0 THEN 'N/D' ELSE dbo.Nombre_Completo_Ubicacion(pe.IdUbicacionDefecto, pe.IdBodega) 
                         END AS NombreUbic
FROM            dbo.producto_estado AS e INNER JOIN
                         dbo.propietarios AS p ON e.IdPropietario = p.IdPropietario LEFT OUTER JOIN
                         dbo.producto_estado_ubic AS pe ON pe.IdEstado = e.IdEstado LEFT OUTER JOIN
                         dbo.bodega_ubicacion AS u ON u.IdUbicacion = e.IdUbicacionDefecto AND pe.IdUbicacionDefecto = u.IdUbicacion
GO


alter table Impresion_productos_barras add IdBodega int,
                                           IdProducto int,
										   IdProductoEstado int,
										   Licencia nvarchar(50),
										   IdTipoTarea int,
										   IdTransaccionEnc int,
										   IdTransaccionDet int,
										   ZPL nvarchar(4000)
GO

alter table impresora add numero_serie nvarchar(50) null,
                         IdImpresoraMarca int null,
						 IdLenguaje int null,
						 IdTipoConexion int null
GO



CREATE TABLE [dbo].[Impresora_Marca](
    [IdImpresoraMarca] [int] NOT NULL,
    [Codigo] [varchar](50) NULL,
    [Nombre] [varchar](50) NULL,
    [User_agr] [nvarchar](50) NULL,
    [Fec_agr] [datetime] NULL,
    [User_mod] [nvarchar](50) NULL,
    [Fec_mod] [datetime] NULL,
    [Activo] [bit] NOT NULL,
CONSTRAINT [PK_Impresora_Marca] PRIMARY KEY CLUSTERED 
(
    [IdImpresoraMarca] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Impresora_Lenguaje](
    [IdImpresoraLenguaje] [int] NOT NULL,
    [Codigo] [nvarchar](50) NULL,
    [Nombre] [nvarchar](50) NULL,
    [User_agr] [nvarchar](50) NULL,
    [Fec_agr] [datetime] NULL,
    [User_mod] [nvarchar](50) NULL,
    [Fec_mod] [datetime] NULL,
    [Activo] [bit] NOT NULL,
CONSTRAINT [PK_Impresora_Lenguaje] PRIMARY KEY CLUSTERED 
(
    [IdImpresoraLenguaje] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Impresora_Tipo_Conexion](
    [IdImpresoraTipoConexion] [int] NOT NULL,
    [Codigo] [nvarchar](50) NULL,
    [Nombre] [nvarchar](50) NULL,
    [User_agr] [nvarchar](50) NULL,
    [Fec_agr] [datetime] NULL,
    [User_mod] [nvarchar](50) NULL,
    [Fec_mod] [datetime] NULL,
    [Activo] [bit] NOT NULL,
CONSTRAINT [PK_Impresora_Tipo_Conexion] PRIMARY KEY CLUSTERED 
(
    [IdImpresoraTipoConexion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  StoredProcedure [dbo].[sp_index_maintenance_daily] EJC, Mejorado con IA Script Date: 02/12/2023 06:26:26 ******/
ALTER PROCEDURE [dbo].[sp_index_maintenance_daily]
AS
BEGIN
    DECLARE @DatabaseName NVARCHAR(150) = DB_NAME();
    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @TableName VARCHAR(255);
    DECLARE @ViewName VARCHAR(255);
    DECLARE @IndexCount INT;
    DECLARE @IndexFregQuery NVARCHAR(MAX);
    DECLARE @IndexRebuildQuery NVARCHAR(MAX);
    DECLARE @IndexName VARCHAR(500);
    DECLARE @SchemaName VARCHAR(500);

    -- Actualizar estadísticas
    EXEC sp_updatestats;

    -- Reconstruir índices para todas las tablas
    DECLARE TableCursor CURSOR FOR 
    SELECT table_name FROM information_schema.tables 
    WHERE table_type = 'base table';

    OPEN TableCursor;
    FETCH NEXT FROM TableCursor INTO @TableName;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @DynamicSQL = N'ALTER INDEX ALL ON dbo.[' + @TableName + '] REBUILD';
        EXEC sp_executesql @DynamicSQL;
        FETCH NEXT FROM TableCursor INTO @TableName;
    END;

    CLOSE TableCursor;
    DEALLOCATE TableCursor;

    -- Limpiar espacio no utilizado
    SET @DynamicSQL = N'DBCC SHRINKDATABASE(N''' + @DatabaseName + ''')';
    EXEC sp_executesql @DynamicSQL;

    -- Regenerar todas las vistas
    DECLARE ViewCursor CURSOR FOR 
    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS;

    OPEN ViewCursor;
    FETCH NEXT FROM ViewCursor INTO @ViewName;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @DynamicSQL = N'EXEC sp_refreshview ''' + @ViewName + '''';
        EXEC sp_executesql @DynamicSQL;
        FETCH NEXT FROM ViewCursor INTO @ViewName;
    END;

    CLOSE ViewCursor;
    DEALLOCATE ViewCursor;

    -- Mantenimiento específico de índices
    CREATE TABLE #Fregmentedindex(Index_name VARCHAR(MAX), table_name VARCHAR(MAX), schema_name VARCHAR(MAX));

    SET @IndexFregQuery = 'SELECT i.[name], o.name, sch.name FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS s INNER JOIN sys.indexes AS i ON s.object_id = i.object_id AND s.index_id = i.index_id INNER JOIN sys.objects AS o ON i.object_id = o.object_id INNER JOIN sys.schemas AS sch ON o.schema_id = sch.schema_id WHERE (s.avg_fragmentation_in_percent > 30 ) AND i.name IS NOT NULL';
    INSERT INTO #Fregmentedindex(Index_name, table_name, schema_name) EXEC sp_executesql @IndexFregQuery;

    SET @IndexCount = (SELECT COUNT(1) FROM #Fregmentedindex);

    WHILE (@IndexCount > 0)
    BEGIN 
        SELECT TOP 1 @TableName = table_name, @IndexName = Index_name, @SchemaName = schema_name FROM #Fregmentedindex;
        SET @IndexRebuildQuery = 'ALTER INDEX [' + @IndexName + '] ON dbo.[' + @TableName + '] REBUILD';
        EXEC sp_executesql @IndexRebuildQuery;
        DELETE FROM #Fregmentedindex WHERE Index_name = @IndexName AND table_name = @TableName;
        SET @IndexCount = @IndexCount - 1;
    END;

    DROP TABLE #Fregmentedindex;
END;
GO

--#EJC202312021401: Agregar IdAreaOrigen, Becofarma.
-- Agregar la columna IdAreaOrigen a la tabla proveedor_bodega
ALTER TABLE proveedor_bodega
ADD IdAreaOrigen INT;
GO

-- Agregar la restricción de clave foránea
ALTER TABLE proveedor_bodega
ADD CONSTRAINT FK_proveedor_bodega_area
FOREIGN KEY (IdAreaOrigen, IdBodega) REFERENCES bodega_area(IdArea, IdBodega);
GO

-- Agregar la columna IdAreaDestino a la tabla cliente_bodega
ALTER TABLE cliente_bodega
ADD IdAreaDestino INT;
GO

-- Agregar la restricción de clave foránea
ALTER TABLE cliente_bodega
ADD CONSTRAINT FK_cliente_bodega_area
FOREIGN KEY (IdAreaDestino, IdBodega) REFERENCES bodega_area(IdArea, IdBodega);
GO

CREATE VIEW [dbo].[VW_Producto_Familia]
AS
SELECT dbo.producto_familia.IdFamilia, dbo.producto_familia.IdPropietario, dbo.propietarios.nombre_comercial AS Propietario, dbo.producto_familia.codigo, dbo.producto_familia.nombre, dbo.producto_familia.activo, 
                  dbo.producto_familia.user_agr, dbo.producto_familia.fec_agr, dbo.producto_familia.user_mod, dbo.producto_familia.fec_mod
FROM     dbo.producto_familia INNER JOIN
                  dbo.propietarios ON dbo.producto_familia.IdPropietario = dbo.propietarios.IdPropietario
GO

 Insert into menu_sistema values('8','Control de calidad','rpControlCalidad',1,'0',0)
 GO
 Insert into menu_sistema values('8.1','Control Calidad principal','rpGestionInventario',2,'8',0)
 GO
 Insert into menu_sistema values('8.1.1','Gestión de inventario','mnuGestionInventarioCalidad',3,'8.1',0)
 GO
  Insert into menu_sistema values('8.1.2','Reportes','mnuReportesControlCalidad',3,'8.1',0)
 GO 

 Insert into menu_sistema values('9','Manufactura Ligera','rpManufacturaLigera',1,'0',0)
 GO

 IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '8')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'8',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO
 IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '8.1')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'8.1',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO
 IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '8.1.1')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'8.1.1',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO
 IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '8.1.2')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'8.1.2',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO
 IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '9')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'9',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

--#EJC20312040925: Obtener el tamaño de tablas de la base de datos.
CREATE VIEW VW_Tamaño_Tablas
AS
SELECT 
    t.name AS TableName,
    s.name AS SchemaName,
    p.rows,
    SUM(a.total_pages) * 8 AS TotalSpaceKB, 
    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,
    SUM(a.used_pages) * 8 AS UsedSpaceKB, 
    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB, 
    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,
    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.object_id = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.name NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.object_id > 255 
GROUP BY 
    t.name, s.name, p.rows
GO

CREATE NONCLUSTERED INDEX NCL_trans_picking_op_20231204
ON [dbo].[trans_picking_op] ([IdPickingEnc])
INCLUDE ([IdOperadorBodega])
GO

--#EJC20231204: Mejora para agregar porcentaje utilizado y tamaño de BD
ALTER VIEW VW_Tamaño_Tablas
AS
WITH TableSizes AS (
    SELECT 
        t.name AS TableName,
        s.name AS SchemaName,
        p.rows,
        SUM(a.total_pages) * 8 AS TotalSpaceKB,
        SUM(a.used_pages) * 8 AS UsedSpaceKB,
        (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB
    FROM 
        sys.tables t
    INNER JOIN      
        sys.indexes i ON t.object_id = i.object_id
    INNER JOIN 
        sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
    INNER JOIN 
        sys.allocation_units a ON p.partition_id = a.container_id
    LEFT OUTER JOIN 
        sys.schemas s ON t.schema_id = s.schema_id
    WHERE 
        t.name NOT LIKE 'dt%' 
        AND t.is_ms_shipped = 0
        AND i.object_id > 255 
    GROUP BY 
        t.name, s.name, p.rows
), DatabaseSize AS (
    SELECT 
        SUM(TotalSpaceKB) AS TotalDatabaseSpaceKB
    FROM 
        TableSizes
)
SELECT 
    ts.TableName,
    ts.SchemaName,
    ts.rows,
    ts.TotalSpaceKB,
    CAST(ts.TotalSpaceKB / 1024.00 AS NUMERIC(36, 2)) AS TotalSpaceMB,
    ts.UsedSpaceKB,
    CAST(ts.UsedSpaceKB / 1024.00 AS NUMERIC(36, 2)) AS UsedSpaceMB,
    ts.UnusedSpaceKB,
	ds.TotalDatabaseSpaceKB,
    CAST(ts.UnusedSpaceKB / 1024.00 AS NUMERIC(36, 2)) AS UnusedSpaceMB,
    CAST((ts.UsedSpaceKB * 100.0) / NULLIF(ds.TotalDatabaseSpaceKB, 0)AS NUMERIC(36, 2)) AS UsedSpacePercentage
FROM 
    TableSizes ts
CROSS JOIN 
    DatabaseSize ds
GO


update menu_sistema set titulo = 'Actualizar versión' where IdMenu = '7.9.1'
update menu_sistema set titulo = 'Regenerar índices' where IdMenu = '7.9.2'
Insert into menu_sistema values('7.9.3','Salud','mnuTamañoTablas',3,'7.9',0)
GO

IF NOT EXISTS(SELECT idmenu FROM menu_rol WHERE IdMenu = '7.9.3')
insert into menu_rol values((select Max(IdMenuRol)+1 from menu_rol),'7.9.3',1,'Erik Calderón',getdate(),'DTS',GETDATE(),1,1)
GO

-- Agregar la columna IdAreaOrigen a la tabla proveedor_bodega
ALTER TABLE proveedor_bodega
ADD IdAreaOrigen INT;
 
-- Agregar la restricción de clave foránea
ALTER TABLE proveedor_bodega
ADD CONSTRAINT FK_proveedor_bodega_area
FOREIGN KEY (IdAreaOrigen, IdBodega) REFERENCES bodega_area(IdArea, IdBodega);

-- Agregar la columna IdAreaDestino a la tabla cliente_bodega
ALTER TABLE cliente_bodega
ADD IdAreaDestino INT;
 
-- Agregar la restricción de clave foránea
ALTER TABLE cliente_bodega
ADD CONSTRAINT FK_cliente_bodega_area
FOREIGN KEY (IdAreaDestino, IdBodega) REFERENCES bodega_area(IdArea, IdBodega);

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
ALTER VIEW [dbo].[VW_ProveedorBodega]
AS
SELECT        dbo.proveedor_bodega.IdBodega, dbo.proveedor_bodega.IdAsignacion, e.nombre AS Empresa, pr.nombre_comercial AS Propietario, p.IdEmpresa, p.IdPropietario, p.IdProveedor, p.nombre, p.telefono, p.nit, p.direccion, p.email, 
                         p.contacto, p.activo, p.muestra_precio, p.user_agr, p.fec_agr, p.user_mod, p.fec_mod, p.actualiza_costo_oc, dbo.proveedor_bodega.activo AS activo_proveedor_bodega, p.codigo AS Código, p.idubicacionvirtual, 
                         p.es_bodega_recepcion, p.es_bodega_traslado, proveedor_bodega.idAreaOrigen
FROM            dbo.proveedor AS p INNER JOIN
                         dbo.empresa AS e ON p.IdEmpresa = e.IdEmpresa INNER JOIN
                         dbo.propietarios AS pr ON p.IdPropietario = pr.IdPropietario LEFT OUTER JOIN
                         dbo.proveedor_bodega ON p.IdProveedor = dbo.proveedor_bodega.IdProveedor
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER VIEW [dbo].[VW_Producto_Estado_Ubic_Bodega_HH]
AS
SELECT e.IdEstado, e.IdPropietario, e.nombre, e.IdUbicacionDefecto, e.utilizable, e.activo, e.user_agr, e.fec_agr, e.user_mod, e.fec_mod,
       e.dañado, e.codigo_bodega_erp, ISNULL(e.sistema,0) Sistema, 
	   ISNULL(pe.IdUbicacionDefecto, 0) AS IdUbicacionBodegaDefecto, 
       ISNULL(pe.IdBodega, 0) AS IdBodega, 
	   CASE WHEN ISNULL(pe.IdUbicacionDefecto, 0) = 0 THEN 'N/D' ELSE dbo.Nombre_Completo_Ubicacion(pe.IdUbicacionDefecto, pe.IdBodega) 
       END AS NombreUbic, e.dias_vencimiento_clasificacion,e.tolerancia_dias_vencimiento
FROM            dbo.producto_estado AS e INNER JOIN
                         dbo.propietarios AS p ON e.IdPropietario = p.IdPropietario LEFT OUTER JOIN
                         (SELECT * 
						  FROM dbo.producto_estado_ubic 
						  WHERE EXISTS (SELECT bu.IdUbicacion 
						                FROM bodega_ubicacion bu 
										WHERE bu.IdUbicacion = producto_estado_ubic.IdUbicacionDefecto AND
						                      bu.IdBodega = producto_estado_ubic.IdBodega )) AS pe  ON pe.IdEstado = e.IdEstado 

GO

/****** Object: View [VW_Producto_Estado_Ubic_Bodega] Script Date: 12/5/2023 7:58:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER VIEW [VW_Producto_Estado_Ubic_Bodega]
AS
SELECT producto_estado.IdEstado, producto_estado.IdPropietario, producto_estado.nombre, producto_estado.IdUbicacionDefecto, producto_estado.utilizable, producto_estado.activo,
       producto_estado.user_agr, producto_estado.fec_agr, producto_estado.user_mod, producto_estado.fec_mod, producto_estado.dañado, producto_estado.codigo_bodega_erp,
       producto_estado.sistema, producto_estado_ubic.IdUbicacionDefecto AS IdUbicacionBodegaDefecto, bodega.IdBodega, dbo.Nombre_Completo_Ubicacion(bodega_ubicacion.IdUbicacion,
       bodega_ubicacion.IdBodega) AS NombreUbic, producto_estado.dias_vencimiento_clasificacion, producto_estado.tolerancia_dias_vencimiento
FROM bodega_ubicacion
INNER JOIN producto_estado_ubic ON bodega_ubicacion.IdUbicacion = producto_estado_ubic.IdUbicacionDefecto AND bodega_ubicacion.IdBodega = producto_estado_ubic.IdBodega
INNER JOIN bodega_tramo ON bodega_ubicacion.IdTramo = bodega_tramo.IdTramo AND bodega_ubicacion.IdBodega = bodega_tramo.IdBodega
INNER JOIN bodega_sector ON bodega_tramo.IdSector = bodega_sector.IdSector AND bodega_tramo.IdBodega = bodega_sector.IdBodega
INNER JOIN bodega_area ON bodega_sector.IdArea = bodega_area.IdArea AND bodega_sector.IdBodega = bodega_area.IdBodega
INNER JOIN bodega ON bodega_area.IdBodega = bodega.IdBodega
RIGHT OUTER JOIN producto_estado ON producto_estado_ubic.IdEstado = producto_estado.IdEstado
GROUP BY producto_estado.IdEstado, producto_estado.IdPropietario, producto_estado.nombre, producto_estado.IdUbicacionDefecto, producto_estado.user_agr, producto_estado.fec_agr,
         producto_estado.user_mod, producto_estado.fec_mod, producto_estado.codigo_bodega_erp, producto_estado_ubic.IdUbicacionDefecto, bodega.IdBodega,
         bodega_ubicacion.IdUbicacion, bodega_ubicacion.IdBodega, producto_estado.utilizable, producto_estado.activo, 
         producto_estado.dañado, producto_estado.sistema, producto_estado.dias_vencimiento_clasificacion, producto_estado.tolerancia_dias_vencimiento
GO

